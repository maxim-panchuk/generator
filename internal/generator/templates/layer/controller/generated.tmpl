package generated

{{- $dpList := getControllerTagDependencies .Tag }}
import (
    {{ .Tag }}Service "{{ getRootFolderPath }}/internal/service/{{ .Tag }}"
    {{- if gt (len $dpList ) 0 }}
        {{- range $idx, $el := $dpList }}
            "{{ getRootFolderPath }}/internal/models/{{ $el }}"
        {{- end }}
    {{- end }}
    {{- if tagContainsTypicalOperation .Tag }}
    "encoding/json"
    "github.com/gorilla/mux"
    "strconv"
    "context"
    {{- end }}
    "net/http"
)

type ControllerImpl struct {
	service {{ .Tag }}Service.Service
}

func NewController(service {{ .Tag }}Service.Service) *ControllerImpl {
	return &ControllerImpl{service: service}
}

{{ $paths := index $.Data.Tags .Tag }}
{{ range $paths -}}
    {{ range .Operations -}}
        {{- $currOperation := . -}}
        {{- $containsPathParameters := containsPathParameters . -}}
        {{- $responseContainsSchema := responseContainsSchema . -}}
        //{{ if or (ne .Summary "") (ne .Description "") }} {{ upFirst .OperationId }} - Summary: {{ .Summary }}. Description: {{ .Description }} {{ end }}
        func (c *ControllerImpl) {{ upFirst .OperationId }}(
           w http.ResponseWriter, r *http.Request) {
                {{- if not .IsTypical }}
                     panic("not implemented")
                {{ else }}
                    {{- if $containsPathParameters }}
                        vars := mux.Vars(r)
                    {{- end }}
                    {{ range .Parameters }}
                        {{- $goType := convertToGoType .Type .Format -}}
                        {{- if eq .In "path" }}
                            {{ .Name }}In, ok := vars["{{ .Name }}"]
                            if !ok {
                                {{ if .Required }}
                                    {{- $response400 := getResponseByCode "400" $currOperation -}}
                                    w.WriteHeader(http.StatusBadRequest)
                                    w.Write([]byte("{{ $response400.Description }}"))
                                    return
                                {{ else }}
                                    panic("some")
                                {{ end }}
                            }

                        {{ end }}
                        {{- if eq .In "query" }}
                            {{ .Name }}In := r.FormValue("{{ .Name }}")
                            if {{ .Name }} == "" {
                                {{ if .Required }}
                                    {{- $response400 := getResponseByCode "400" $currOperation -}}
                                    w.WriteHeader(http.StatusBadRequest)
                                    w.Write([]byte("{{ $response400.Description }}"))
                                    return
                                {{ else }}
                                    panic("some")
                                {{ end }}
                            }
                        {{ end }}
                        {{ if or (eq $goType "int32") (eq $goType "int64") }}
                            {{ .Name }}Int, err := strconv.Atoi({{ .Name }}In)
                            if err != nil {
                                w.WriteHeader(http.StatusBadRequest)
                                w.Write([]byte("bad user input"))
                                return
                            }
                            {{ if eq $goType "int32" }}
                                {{ .Name }} := int32({{ .Name }}Int)
                            {{ else if eq $goType "int64" }}
                                {{ .Name }} := int64({{ .Name }}Int)
                            {{ end }}
                        {{ end }}
                    {{ end }}
                    {{ if .RequestBody }}
                        // TODO генерация, если слайс схем
                        {{ $modelName := .RequestBody.Content.ModelName -}}
                        var {{ lowFirst $modelName }}DTO *{{ lowFirst $modelName }}.{{ $modelName }}DTO
                        err := json.NewDecoder(r.Body).Decode(&{{ lowFirst $modelName }}DTO)
                        if err != nil {
                            w.WriteHeader(http.StatusBadRequest)
                            w.Write([]byte("invalid input"))
                            return
                        }
                    {{ end }}

                    {{- if $responseContainsSchema }}
                        dto, err := c.service.{{ upFirst $currOperation.OperationId }}(
                            context.Background(),
                            {{- if .RequestBody -}}
                                {{ lowFirst .RequestBody.Content.ModelName }}DTO,
                            {{- end }}
                            {{- range .Parameters -}}
                                {{ .Name }},
                            {{- end }}
                        )
                        if err != nil {
                            w.WriteHeader(http.StatusInternalServerError)
                            w.Write([]byte(err.Error()))
                            return
                        }

                        b, err := json.Marshal(dto)
                        if err != nil {
                            w.WriteHeader(http.StatusInternalServerError)
                            w.Write([]byte(err.Error()))
                            return
                        }

                        w.WriteHeader(http.StatusOK)
                        w.Write(b)
                        return
                    {{ else }}
                        if err := c.service.{{ upFirst $currOperation.OperationId }}(
                            context.Background(),
                            {{- if .RequestBody -}}
                                {{ lowFirst .RequestBody.Content.ModelName }},
                            {{- end }}
                            {{- range .Parameters -}}
                                {{ .Name }},
                            {{- end }}
                        ); err != nil {
                            w.WriteHeader(http.StatusInternalServerError)
                            w.Write([]byte(err.Error()))
                            return
                        } else {
                            w.WriteHeader(http.StatusOK)
                            return
                        }
                    {{- end }}
                {{ end }}
           }
    {{ end -}}
{{ end }}
