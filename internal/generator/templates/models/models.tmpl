package {{ lowFirst .ModelName }}

{{- $modelEnums := getModelEnums . -}}
{{- $containsTime := containsTime . -}}
{{- $modelDependencies := getModelDependencies . }}

import (
    {{ if $containsTime }}
    "time"
    {{ end }}
    {{ if gt (len $modelDependencies ) 0 }}
        {{ range $idx, $el := $modelDependencies }}
            "{{ getRootFolderPath }}/internal/models/{{ $el }}"
        {{ end }}
    {{ end }}
)

{{ if gt (len $modelEnums) 0 }}
     {{- range $modelEnums }}
        {{- $modelName := .ModelName }}
            type {{ upFirst $modelName }} {{ getDtoFieldType . }}
            const (
                {{ range $idx, $el := .EnumValues -}}
                    {{ toUpper $el }} {{ upFirst $modelName }} = "{{ $el }}"
                {{ end }}
            )
     {{ end }}
{{ end }}

{{ if .Description }} {{- .Description }} {{ end }}
type {{ .ModelName }}DTO struct {
    {{ range $fieldName := .PropKeys -}}
        {{- $field := getField $fieldName $.Properties -}}
        {{ upFirst $fieldName }} {{ getDtoFieldType $field }} `json:"{{ $fieldName }}"` {{ if $field.Description -}} // {{ $field.Description }} {{- end }}
    {{ end }}
}

{{ if isModelEntity . }}
{{- $modelName := lowFirst .ModelName -}}
type {{ .ModelName }}Entity struct {
    {{ range $fieldName := .PropKeys -}}
        {{- $field := getField $fieldName $.Properties -}}
        {{ upFirst $fieldName }} {{ getTypeForEntity $field }} `{{ getAnnotationForEntityField $modelName $field }}`
    {{ end }}
}

{{ end }}