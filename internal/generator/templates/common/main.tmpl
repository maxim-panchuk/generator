package main

import (
    "{{ getServiceName }}/docs"
    "github.com/gorilla/mux"
    "gorm.io/gorm"
    "net/http"
    "fmt"
    "{{ getRootFolderPath }}/configs/database/postgres"
    {{ range $tag, $paths := .Tags }}
        {{ $tag }}RepoImport "{{ getRootFolderPath }}/internal/database/repositories/{{ $tag }}"
        {{ $tag }}ServiceImport "{{ getRootFolderPath }}/internal/service/{{ $tag }}"
        {{ $tag }}ControllerImport "{{ getRootFolderPath }}/internal/transport/http/in/{{ $tag }}"
    {{ end }}
    {{ range .Models -}}
        {{ if .XDb -}}
            "{{ getRootFolderPath }}/internal/models/{{ lowFirst .ModelName }}"
        {{- end }}
    {{ end }}
    httpSwagger "gitflex.diasoft.ru/mvp-go/golang-libraries/http-swagger.git"
)

// @title {{ getServiceName }} api
// @version 1.0
// @description {{ getServiceName }} api
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @BasePath /{{ getServiceName }}
func main() {
    gormdb := postgres.GetGorm()
    {{ range $tag, $paths := .Tags }}
        {{ $tag }}Repo := {{ $tag }}RepoImport.NewRepository(gormdb)
        {{ $tag }}Service := {{ $tag }}ServiceImport.NewService({{ $tag }}Repo)
        {{ $tag }}Controller := {{ $tag }}ControllerImport.NewController({{ $tag }}Service)
    {{ end }}

    r := mux.NewRouter()
    r.PathPrefix("/{{ getServiceName }}/swagger/").Handler(httpSwagger.Handler()).Methods(http.MethodGet)

    initApiEndpoints(
        {{ range $tag, $paths := .Tags -}}
            {{ $tag }}Controller,
        {{ end -}}
        r,
    )

    docs.SwaggerInfo.BasePath = "/{{ getServiceName }}"

    srv := &http.Server{
    	Addr:    "localhost:8080",
    	Handler: r,
    }

    println(
    		fmt.Sprintf("\n----------------------------------------------------------\n\t"+
    			"Application \"{{ getServiceName }}\" is running! Access URLs:\n\t"+
    			"Local: \t\thttp://localhost:8080/{{ getServiceName }}\n\t"+
    			"Swagger UI: \thttp://localhost:8080/{{ getServiceName }}/swagger/index.html\n\t"+
    			"\n----------------------------------------------------------\n",
    		),
    	)
    migrate(gormdb)

    if err := srv.ListenAndServe(); err != nil {
    	panic(err)
    }
}

func initApiEndpoints(
    {{ range $tag, $paths := .Tags -}}
        {{ $tag }} {{ $tag }}ControllerImport.Controller,
    {{ end -}}
    r *mux.Router,
) {
    {{ range $tag, $paths := .Tags -}}
        {{ range $path := $paths -}}
            {{- $url := $path.Url -}}
            {{- range $op := $path.Operations -}}
                r.HandleFunc("/{{ getServiceName }}{{ $url }}", {{ $tag }}.{{ upFirst $op.OperationId }}).Methods("{{ toUpper $op.Type }}")
            {{ end -}}
        {{ end -}}
    {{ end -}}
}

func migrate(gormdb *gorm.DB) {
	if err := gormdb.Migrator().AutoMigrate(
	    {{ range .Models -}}
	        {{ if .XDb -}}
	            {{ lowFirst .ModelName }}.{{ .ModelName }}Entity{},
	        {{ end }}
	    {{ end }}
	); err != nil {
		panic(err)
	}
}