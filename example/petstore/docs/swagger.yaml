definitions:
  apiResponse.ApiResponseDTO:
    properties:
      code:
        type: integer
      message:
        type: string
      type:
        type: string
    type: object
  category.CategoryDTO:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  order.OrderDTO:
    properties:
      complete:
        type: boolean
      id:
        type: integer
      petId:
        type: integer
      quantity:
        type: integer
      shipDate:
        type: string
      status:
        description: Order Status
        type: string
    type: object
  pet.PetDTO:
    properties:
      category:
        $ref: '#/definitions/category.CategoryDTO'
      id:
        type: integer
      name:
        type: string
      photoUrls:
        items:
          type: string
        type: array
      status:
        description: pet status in the store
        type: string
      tags:
        items:
          $ref: '#/definitions/tag.TagDTO'
        type: array
    type: object
  tag.TagDTO:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  user.UserDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        description: User Status
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
  description: petstore api
  title: petstore api
  version: "1.0"
paths:
  /pet:
    post:
      consumes:
      - application/json
      description: '"Add a new pet to the store"'
      parameters:
      - description: Add a new pet to the store
        in: body
        name: Pet
        required: true
        schema:
          $ref: '#/definitions/pet.PetDTO'
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/pet.PetDTO'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
      - BearerAuth: []
      summary: '"Add a new pet to the store"'
      tags:
      - pet
    put:
      consumes:
      - application/json
      description: '"Update an existing pet by Id"'
      parameters:
      - description: Update an existing pet by Id
        in: body
        name: Pet
        required: true
        schema:
          $ref: '#/definitions/pet.PetDTO'
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/pet.PetDTO'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
      security:
      - BearerAuth: []
      summary: '"Update an existing pet"'
      tags:
      - pet
  /pet/{petId}:
    delete:
      consumes:
      - application/json
      description: '"delete a pet"'
      parameters:
      - description: Pet id to delete
        in: path
        name: petId
        required: true
        type: integer
      responses:
        "400":
          description: Invalid pet value
      security:
      - BearerAuth: []
      summary: '"Deletes a pet"'
      tags:
      - pet
    get:
      consumes:
      - application/json
      description: '"Returns a single pet"'
      parameters:
      - description: ID of pet to return
        in: path
        name: petId
        required: true
        type: integer
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/pet.PetDTO'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - BearerAuth: []
      summary: '"Find pet by ID"'
      tags:
      - pet
    post:
      consumes:
      - application/json
      description: '"default description"'
      parameters:
      - description: ID of pet that needs to be updated
        in: path
        name: petId
        required: true
        type: integer
      - description: Name of pet that needs to be updated
        in: query
        name: name
        required: true
        type: string
      - description: Status of pet that needs to be updated
        in: query
        name: status
        required: true
        type: string
      responses:
        "400":
          description: Invalid input
      security:
      - BearerAuth: []
      summary: '"Updates a pet in the store with form data"'
      tags:
      - pet
  /pet/{petId}/uploadImage:
    post:
      consumes:
      - application/json
      description: '"default description"'
      parameters:
      - description: ID of pet to update
        in: path
        name: petId
        required: true
        type: integer
      - description: Additional Metadata
        in: query
        name: additionalMetadata
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/apiResponse.ApiResponseDTO'
      security:
      - BearerAuth: []
      summary: '"uploads an image"'
      tags:
      - pet
  /pet/findByStatus:
    get:
      consumes:
      - application/json
      description: '"Multiple status values can be provided with comma separated strings"'
      parameters:
      - description: Status values that need to be considered for filter
        in: query
        name: status
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/pet.PetDTO'
            type: array
        "400":
          description: Invalid status value
      security:
      - BearerAuth: []
      summary: '"Finds Pets by status"'
      tags:
      - pet
  /pet/findByTags:
    get:
      consumes:
      - application/json
      description: '"Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing."'
      parameters:
      - description: Tags to filter by
        in: query
        name: tags
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/pet.PetDTO'
            type: array
        "400":
          description: Invalid tag value
      security:
      - BearerAuth: []
      summary: '"Finds Pets by tags"'
      tags:
      - pet
  /store/inventory:
    get:
      consumes:
      - application/json
      description: '"Returns a map of status codes to quantities"'
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth: []
      summary: '"Returns pet inventories by status"'
      tags:
      - store
  /store/order:
    post:
      consumes:
      - application/json
      description: '"Place a new order in the store"'
      parameters:
      - description: Place a new order in the store
        in: body
        name: Order
        required: true
        schema:
          $ref: '#/definitions/order.OrderDTO'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/order.OrderDTO'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
      - BearerAuth: []
      summary: '"Place an order for a pet"'
      tags:
      - store
  /store/order/{orderId}:
    delete:
      consumes:
      - application/json
      description: '"For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors"'
      parameters:
      - description: ID of the order that needs to be deleted
        in: path
        name: orderId
        required: true
        type: integer
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      security:
      - BearerAuth: []
      summary: '"Delete purchase order by ID"'
      tags:
      - store
    get:
      consumes:
      - application/json
      description: '"For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions."'
      parameters:
      - description: ID of order that needs to be fetched
        in: path
        name: orderId
        required: true
        type: integer
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/order.OrderDTO'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      security:
      - BearerAuth: []
      summary: '"Find purchase order by ID"'
      tags:
      - store
  /user:
    post:
      consumes:
      - application/json
      description: '"This can only be done by the logged in user."'
      parameters:
      - description: This can only be done by the logged in user.
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/user.UserDTO'
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/user.UserDTO'
      security:
      - BearerAuth: []
      summary: '"Create user"'
      tags:
      - user
  /user/{username}:
    delete:
      consumes:
      - application/json
      description: '"This can only be done by the logged in user."'
      parameters:
      - description: The name that needs to be deleted
        in: path
        name: username
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - BearerAuth: []
      summary: '"Delete user"'
      tags:
      - user
    get:
      consumes:
      - application/json
      description: '"default description"'
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/user.UserDTO'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - BearerAuth: []
      summary: '"Get user by user name"'
      tags:
      - user
    put:
      consumes:
      - application/json
      description: '"This can only be done by the logged in user."'
      parameters:
      - description: This can only be done by the logged in user.
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/user.UserDTO'
      - description: name that need to be deleted
        in: path
        name: username
        required: true
        type: string
      responses:
        default:
          description: successful operation
      security:
      - BearerAuth: []
      summary: '"Update user"'
      tags:
      - user
  /user/createWithList:
    post:
      consumes:
      - application/json
      description: '"Creates list of users with given input array"'
      parameters:
      - description: Creates list of users with given input array
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/user.UserDTO'
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/user.UserDTO'
        default:
          description: successful operation
      security:
      - BearerAuth: []
      summary: '"Creates list of users with given input array"'
      tags:
      - user
  /user/login:
    get:
      consumes:
      - application/json
      description: '"default description"'
      parameters:
      - description: The user name for login
        in: query
        name: username
        type: string
      - description: The password for login in clear text
        in: query
        name: password
        type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid username/password supplied
      security:
      - BearerAuth: []
      summary: '"Logs user into the system"'
      tags:
      - user
  /user/logout:
    get:
      consumes:
      - application/json
      description: '"default description"'
      responses:
        default:
          description: successful operation
      security:
      - BearerAuth: []
      summary: '"Logs out current logged in user session"'
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
